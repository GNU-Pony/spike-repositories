# -*- python -*-
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.  This file is offered as-is,
# without any warranty.  [GNUAllPermissive]
from dragonsuite import *

i_use_man = get('I_USE_MAN', 'y').lower().startswith('y')

pkgname = 'thin-provisioning-tools'
pkgver = '0.2.8'
_commit = 'c00c832378d37c7307da4857d62db32f020dca57' ## commit with merge patch for 0.2.8 that makes to it compile
pkgdesc = 'A suite of tools for manipulating the metadata of the dm-thin device-mapper target'
upstream = 'https://github.com/jthornber/%s' % pkgname
arch = ['x86_64']
freedom = SOFTWARE | MEDIA
license = ['GPL3']
private = SUPPORTED
depends = ['expat', 'gcc-libs', 'glibc']
makedepends = ['gcc', 'boost', 'autoconf'] + depends
if i_use_man:
    makedepends.appends('gzip')
source = ['%s/archive/v%s.tar.gz' % (upstream, _commit)]
sha3sums = ['22E6A551292B13BE5A635B911F4F013140624590435202C70AB54900FC76FE6B82F0AECFD1B8D5008616BC03F4137CCD2C856D77C8B1F426B9F448514181C56EEEC1A19E878582B1']

_prefix  = lambda private : ('/usr' if not private else path('~/.local'))


def ride(private):
    echo('A set of manpages have been installed')


def build(startdir, srcdir, pkgdir, private):
    cd('%s/%s-%s' % (srcdir, pkgname, _commit))
    execute('autoconf')
    execute('./configure', '--prefix=' + _prefix(private))
    make('-j1') # Just do not use -j without argument (unlimited), it can freeze your machine


def package(startdir, srcdir, pkgdir, private):
    cd('%s/%s-%s' % (srcdir, pkgname,  _commit))
    _pre = _prefix(private)
    make('DESTDIR=%s' % pkgdir, 'BINDIR=%s%s/bin' % (pkgdir, _pre), 'MANDIR=%s/share/man' % _pre, 'install')
    
    _pre = pkgdir + _pre
    _dir = _pre + '/share/licenses/' + pkgname
    mkdir_p(_dir)
    ln('/usr/share/licenses/common/GPL3', _dir + '/LICENSE')
    
    if not i_use_man:
        rm_r(_pre + '/share/man')
    else:
        f_ = _pre + '/share/man/man8/thin_%s.8'
        for f in ['metadata_size', 'rmap', 'restore', 'repair', 'dump', 'check']:
            execute('gzip', '-9', '--', f_ % f)

