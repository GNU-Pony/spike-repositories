# -*- python -*-
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.  This file is offered as-is,
# without any warranty.  [GNUAllPermissive]
from dragonsuite import *

i_use_info = get('I_USE_INFO', 'y').lower().startswith('y')
i_use_bash = get('I_USE_BASH', 'y').lower().startswith('y')
i_use_fish = get('I_USE_FISH', 'y').lower().startswith('y')
i_use_zsh = get('I_USE_ZSH', 'y').lower().startswith('y')

pkgname = 'rmixer'
pkgver = '1.3.1'
pkgdesc = 'Simple remote interface for the ALSA mixer'
upstream = 'https://github.com/maandree/rmixer'
arch = ['any']
freedom = SOFTWARE | MEDIA
license = ['GPL3']
private = SUPPORTED
depends = ['sh', 'java-runtime>=7', 'alsa-utils']
makedepends = ['make', 'coreutils', 'java-environment>=7']
if i_use_info:
    makedepends.append('texinfo')
    makedepends.append('gzip')
if i_use_bash or i_use_fish or i_use_zsh:
    makedepends.append('auto-auto-complete')
source = ['%s/archive/%s.tar.gz' % (upstream, pkgver)]
sha3sums = ['A46CE199469D4FE42392D1F548C26D492F836D9D3CD15E8CF683A28C29B93D1B1661A6A308C12895ABF30B8F36423E91807889AC1A206ED762D918A12854DB162B66C561C0CC6D18']

_prefix = lambda private : '/usr' if not private else path('~/.local')


def ride(private):
    execute(['info', 'rmixer', 'invoking'])


def build(startdir, srcdir, pkgdir, private):
    cd('%s/rmixer-%s' % (srcdir, pkgver))
    args = ['PREFIX=%s' % _prefix(private), 'PKGNAME=%s' % pkgname, 'DESTDIR=%s' % pkgdir]
    args.append('code')
    if i_use_info:  args.append('info')
    if i_use_bash:  args.append('bash')
    if i_use_fish:  args.append('fish')
    if i_use_zsh:   args.append('zsh')
    make(args)


def package(startdir, srcdir, pkgdir, private):
    cd('%s/rmixer-%s' % (srcdir, pkgver))
    args = ['PREFIX=%s' % _prefix(private), 'PKGNAME=%s' % pkgname, 'DESTDIR=%s' % pkgdir]
    args.append('install-cmd')
    args.append('install-license')
    if i_use_info:  args.append('install-info')
    if i_use_bash:  args.append('install-bash')
    if i_use_fish:  args.append('install-fish')
    if i_use_zsh:   args.append('install-zsh')
    make(args)


def post_install(tmpdir, rootdir, installedfiles, private):
    post_install_info(rootdir, installedfiles, private, i_use_info)


def pre_upgrade(tmpdir, rootdir, installedfiles, private):
    pre_upgrade_info(rootdir, installedfiles, private)


def post_upgrade(tmpdir, rootdir, installedfiles, private):
    post_upgrade_info(rootdir, installedfiles, private, i_use_info)


def pre_uninstall(tmpdir, rootdir, installedfiles, private):
    pre_uninstall_info(rootdir, installedfiles, private)

