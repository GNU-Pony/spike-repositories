# -*- python -*-
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.  This file is offered as-is,
# without any warranty.  [GNUAllPermissive]
from dragonsuite import *

i_use_info = get('I_USE_INFO', 'y').lower().startswith('y')

pkgname = 'ponypipe'
pkgver = '1.2.4'
pkgdesc = 'Ponify and deponify text'
upstream = 'https://github.com/maandree/ponypipe'
arch = ['any']
freedom = SOFTWARE | MEDIA
license = ['WTFPL2']
private = SUPPORTED
depends = ['java-runtime>=6', 'sh']
makedepends = ['make', 'coreutils', 'java-environment>=6']
if i_use_info:
    makedepends.append('texinfo')
source = ['%s/archive/v%s.tar.gz' % (upstream, pkgver)]
sha3sums = ['D5B3BB0C0E04CD359C0CE34AD4319ADAE49F1DDAB475E5C381E319F6E448A5DE6DF15D88293D09AE3DFE07DED1F88440BC90C4E28304FC240AD9B8FC76320F63C9E3DBE85019BB38']

_prefix = lambda private : '/usr' if not private else path('~/.local')


def ride(private):
    execute('ponypipe')


def build(startdir, srcdir, pkgdir, private):
    cd('%s/ponypipe-v%s' % (srcdir, pkgver))
    make('PREFIX=%s' % _prefix(private), 'PKGNAME=%s' % pkgname, 'DESTDIR=%s' % pkgdir, 'code')
    if i_use_info:
        make('PREFIX=%s' % _prefix(private), 'PKGNAME=%s' % pkgname, 'DESTDIR=%s' % pkgdir, 'info')


def package(startdir, srcdir, pkgdir, private):
    cd('%s/ponypipe-v%s' % (srcdir, pkgver))
    make('PREFIX=%s' % _prefix(private), 'PKGNAME=%s' % pkgname, 'DESTDIR=%s' % pkgdir, 'install-cmd', 'install-license')
    if i_use_info:
        make('PREFIX=%s' % _prefix(private), 'PKGNAME=%s' % pkgname, 'DESTDIR=%s' % pkgdir, 'install-info')


def post_install(tmpdir, rootdir, installedfiles, private):
    post_install_info(rootdir, installedfiles, private, i_use_info)


def pre_upgrade(tmpdir, rootdir, installedfiles, private):
    pre_upgrade_info(rootdir, installedfiles, private)


def post_upgrade(tmpdir, rootdir, installedfiles, private):
    post_upgrade_info(rootdir, installedfiles, private, i_use_info)


def pre_uninstall(tmpdir, rootdir, installedfiles, private):
    pre_uninstall_info(rootdir, installedfiles, private)

