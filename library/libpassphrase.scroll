# -*- python -*-
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.  This file is offered as-is,
# without any warranty.  [GNUAllPermissive]
from dragonsuite import *

i_use_info = get('I_USE_INFO', 'y').lower().startswith('y')
i_use_pdf  = get('I_USE_PDF',  'n').lower().startswith('y')
i_use_ps   = get('I_USE_PS',   'n').lower().startswith('y')
i_use_dvi  = get('I_USE_DVI',  'n').lower().startswith('y')

pkgname = 'libpassphrase'
pkgver = '1449331105'
pkgdesc = 'Personalisable library for TTY passphrase reading'
upstream = 'https://github.com/GNU-Pony/libpassphrase'
arch = ['x86_64', 'armv6']
freedom = SOFTWARE | MEDIA
license = ['GPL3']
private = SUPPORTED
depends = ['libc']
makedepends = ['make', 'coreutils', 'gcc']
optdepends = ['passcheck: for strength meter']
if i_use_info or i_use_pdf or i_use_ps or i_use_dvi:
    makedepends.append('texinfo')
source = ['%s/archive/%s.tar.gz' % (upstream, pkgver)]
sha3sums = ['BF508DFCA7CFD51B9932E44AADAFE0DA5F1A143F023D85EE52F72FF639AE1002EF5E8ACD409275D366369ED438DB747AD147A06E5529880AEE9A44EE164EB987A486FC2FC1B74882']

_prefix = lambda private : '/usr' if not private else path('~/.local')



def _configure():
    '''
    See `info libpassphrase configuring` for how to configure libpassphrase
    
    @return  :list<str>  Options to pass to `make` to configure libpassphrase
    '''
    options = []
    
    #options.append('PASSPHRASE_ECHO')      # Do not hide the passphrase
    #options.append('PASSPHRASE_STAR')      # Use '*' for each character instead of no echo
    options.append('PASSPHRASE_TEXT')      # Use '(empty)' and not '(not empty)' instead of no echo
    #options.append('PASSPHRASE_REALLOC')   # Soften security by using `realloc`
    options.append('PASSPHRASE_MOVE')      # Enable move of point
    options.append('PASSPHRASE_INSERT')    # Enable insert mode
    options.append('PASSPHRASE_OVERRIDE')  # Enable override mode
    options.append('PASSPHRASE_DELETE')    # Enable reversed erase command
    options.append('PASSPHRASE_CONTROL')   # Enable use of control key combinations
    options.append('PASSPHRASE_DEDICATED') # Enable use of dedicated keys
    options.append('DEFAULT_INSERT')       # Use insert mode as default
    options.append('PASSPHRASE_INVALID')   # Prevent duplication of non-initialised memory
    options.append('PASSPHRASE_METER')     # Enable strength meter for new passphrases
    
    star_char = '*'
    text_empty = '(empty)'
    text_not_empty = '(not empty)'
    text_strength="Strength:"
    
    rc = ['OPTIONS="%s"' % ' '.join(options)]
    rc.append('%s="%s"' % ('PASSPHRASE_STAR_CHAR',      star_char))
    rc.append('%s="%s"' % ('PASSPHRASE_TEXT_EMPTY',     text_empty))
    rc.append('%s="%s"' % ('PASSPHRASE_TEXT_NOT_EMPTY', text_not_empty))
    rc.append('%s="%s"' % ('PASSPHRASE_TEXT_STRENGTH',  text_strength))
    
    return rc



def ride(private):
    info('libpassphrase')


_make_opts = None

def build(startdir, srcdir, pkgdir, private):
    cd('%s/libpassphrase-%s' % (srcdir, pkgver))
    _make_opts = _configure()
    _make_opts += ['PKGNAME=%s' % pkgname, 'DESTDIR=%s' % pkgdir, 'PREFIX=%' % _prefix(private)]
    params = _make_opts[:]
    params.append('libpassphrase')
    if i_use_info:
        params.append('info')
    if i_use_pdf:
        params.append('pdf')
    if i_use_ps:
        params.append('ps')
    if i_use_dvi:
        params.append('dvi')
    make(params)


def package(startdir, srcdir, pkgdir, private):
    cd('%s/libpassphrase-%s' % (srcdir, pkgver))
    params = _make_opts[:]
    params.append('install-base')
    if i_use_info:
        params.append('install-info')
    if i_use_pdf:
        params.append('install-pdf')
    if i_use_ps:
        params.append('install-ps')
    if i_use_dvi:
        params.append('install-dvi')
    make(params)
    _dir = '%s%s/share/licenses/%s' % (pkgdir, _prefix(private), pkgname)
    rm('%s/LICENSE' % _dir)
    ln('/usr/share/licenses/common/GPL3', '%s/LICENSE' % _dir)


def post_install(tmpdir, rootdir, installedfiles, private):
    post_install_info(rootdir, installedfiles, private, i_use_info)


def pre_upgrade(tmpdir, rootdir, installedfiles, private):
    pre_upgrade_info(rootdir, installedfiles, private)


def post_upgrade(tmpdir, rootdir, installedfiles, private):
    post_upgrade_info(rootdir, installedfiles, private, i_use_info)


def pre_uninstall(tmpdir, rootdir, installedfiles, private):
    pre_uninstall_info(rootdir, installedfiles, private)

