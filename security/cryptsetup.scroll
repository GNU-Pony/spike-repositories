# -*- python -*-
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.  This file is offered as-is,
# without any warranty.  [GNUAllPermissive]
from dragonsuite import *

i_use_man            = get('I_USE_MAN',            'y').lower().startswith('y')
i_use_locale         = get('I_USE_LOCALE',         '*')
i_use_largefiles     = get('I_USE_LARGEFILES',     'y').lower().startswith('y')
i_use_fips           = get('I_USE_FIPS',           'n').lower().startswith('y')
i_use_secure         = get('I_USE_SECURE',         'y').lower().startswith('y')
i_use_crypto_backend = get('I_USE_CRYPTO_BACKEND', 'gcrypt').lower().split(',')

_crypto = 'gcrypt'
for _candidate in i_use_crypto_backend:
    if _candidate in ('gcrypt', 'openssl', 'nss', 'kernel', 'nettle'):
        _crypto = _candidate
        break

pkgname = 'cryptsetup'
pkgver = '1.6.0'
pkgdesc = 'Userspace setup tool for transparent encryption of block devices using dm-crypt'
upstream = 'http://code.google.com/p/cryptsetup/'
arch = ['x86_64']
freedom = SOFTWARE | MEDIA
license = ['GPL2', 'LGPL2.1']
private = SUPPORTED
group = ['base']
depends = ['glibc', 'device-mapper', 'popt', 'util-linux', 'linux', 'sed', 'coreutils']
makedepends = ['glibc', 'popt', 'gcc', 'device-mapper', 'linux', 'sh', 'grep', 'findutils', 'sed', 'make', 'coreutils', 'm4']
if _crypto == 'gcrypt':
    depends.append('libgcrypt')
    makedepends.append('libgcrypt')
elif not _crypto == 'kernel':
    depends.append(_crypto)
    makedepends.append('crypto')
options = ['!emptydirs']
source = ['http://cryptsetup.googlecode.com/files/cryptsetup-%s.tar.bz2' % pkgver]
sha3sums = ['30EE990866E89002932B0D299C635A379123F47132D12C68EF30D898A1FBA981932F830AF30576C76138977EAA8257B46C4DA0CCF42B5B868ACB7C9B8B619E5B0550E895ECEAB5C7']

_prefix = lambda private : '/usr' if not private else path('~/.local')


def ride(private):
    execute('man', '8', 'cryptsetup')


def build(startdir, srcdir, pkgdir, private):
    cd('%s/cryptsetup-%s' % (srcdir, pkgver))
    args = ['./configure', '--prefix=' + _prefix(private), '--disable-static']
    args.append('--enable-cryptsetup-reencrypt')
    #args.append('--disable-veritysetup')
    args.append('--with-crypto_backend=' + _crypto)
    if not i_use_largefiles:
        args.append('--disable-largefile')
    if i_use_fips:
        args.append('--enable-fips')
    if i_use_secure:
        args.append('--enable-pwquality')
        args.append('--enable-dev-random')
    execute('./configure')
    make()


def package(startdir, srcdir, pkgdir, private):
    cd('%s/cryptsetup-%s' % (srcdir, pkgver))
    make('DESTDIR=%s' % pkgdir, 'install')
    
    _dir = pkgdir + _prefix(private) + '/licenses/' + pkgname
    mkdir_p(_dir)
    for _lic in license:
        ln('/usr/share/licenses/common/' + _lic, _dir + '/LICENSE.' + _lic.lower())
    
    if not i_use_man:
        rm_r(pkgdir + _prefix(private) + '/share/man')
    filter_locale(i_use_locale, pkgdir, _prefix(private))

